<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jahongir Rahmonov</title><link href="http://rahmonov.me/" rel="alternate"></link><link href="http://rahmonov.me/feeds/programming.atom.xml" rel="self"></link><id>http://rahmonov.me/</id><updated>2018-02-25T20:10:00+05:00</updated><entry><title>How to become a senior software developer</title><link href="http://rahmonov.me/posts/how-to-become-senior-software-developer/" rel="alternate"></link><published>2018-02-25T20:10:00+05:00</published><updated>2018-02-25T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2018-02-25:posts/how-to-become-senior-software-developer/</id><summary type="html">&lt;p&gt;You have been a junior or a middle developer for too long now. You feel like you deserve more. You feel like it is time 
to grab life by the balls and rise up the career ladder. Well, congratulations! You are so lucky to be reading this blog post 
because I am about to reveal a secret ingredient I used to become a senior software developer. This is a unique ingredient
which no one else is aware of and which will skyrocket your career in no time. But I warn you! This is not an easy feat 
to accomplish. Ready? Let's go.&lt;/p&gt;
&lt;h2&gt;The Secret Ingredient&lt;/h2&gt;
&lt;p&gt;First, you need to get the following four things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A drop of a virgin's blood&lt;/li&gt;
&lt;li&gt;Vibranium from Wakanda&lt;/li&gt;
&lt;li&gt;Some twigs of yew that were broken off during a lunar eclipse&lt;/li&gt;
&lt;li&gt;A strand of Steve Harvey's mustache&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mix them up and drink the result on the third Sunday of every month for the next 3 months. Right after your first intake,
you will start feeling that your coding abilities start to improve. You will immediately start coming up with algorithms
to solve &lt;a href="https://en.wikipedia.org/wiki/NP-completeness"&gt;NP-complete problems&lt;/a&gt; and who knows? Maybe you will be receiving your
well-deserved Nobel prize pretty soon.&lt;/p&gt;
&lt;h2&gt;Wait, what?!&lt;/h2&gt;
&lt;p&gt;Just kidding, just kidding. But if you have managed to get some vibranium already, let me know. I will buy some. I am dead 
serious!&lt;/p&gt;
&lt;h2&gt;On a serious note&lt;/h2&gt;
&lt;p&gt;Before I get started with my advice, I want you to understand the following things first:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;"Senior" does not mean that you are a super skilled developer or a 10x ninja. It does not mean that you are the best
in the team. It simply means that you have a little more responsibilities than others. It means that your management will
talk to YOU, not somebody else, if they have questions or feedback about the things you and your team are responsible for.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are a senior in your current company, it does not mean that you will surely be a senior in another company. I hate 
to tell you this but you can even go down to become a junior somewhere else before the company can trust you enough to give you
more responsibilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following is only my experience. Some of the points may not apply to you. But I am sure they do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"Goddammit, tell me how to become a senior developer already!" I hear you say. Okay, okay. Calm down. Here it is, in no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Take responsibilities and execute&lt;/strong&gt;. This is the most important advice I can give you. Other points are derived from this in one way or another. 
So, if you learn one thing from this post, this should be it. Take on more responsibilities. When talking to your 
management or colleagues or in meetings, there will be many questions of "Who will do X or Y?". Raise your hand and 
volunteer to be responsible for those X and Y. Most importantly, do what said you would do and when you said you would do it. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Always go an extra mile&lt;/strong&gt;. This one should be obvious. You have a task. Do it well and do it on time. Good job. But 
this does not make you stand out from the rest. Others are doing their tasks on time as well. That's why try to do something
extra. For example, you have a task of automating the deployment pipeline. Do it so that there is &lt;a href="/posts/zero-downtime-deployment-with-kubernetes/"&gt;zero downtime between deployments&lt;/a&gt; 
even if it is not required. How cool would that make you look? The answer is "very cool". But make sure that you do what's required first
and only then do the extra stuff. I don't want your colleagues emailing me saying you are trying to make everything perfect and thus
running late on other tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be a problem solver&lt;/strong&gt;. Again, when talking to your colleagues you will often hear them say something like "It is very hard to look through the logs 
because all of them are in different places and not visually attractive" or "It is very hard to deploy our microservices now". 
This is exactly what happened in our company. What did I do? I went ahead and set up &lt;a href="https://www.graylog.org"&gt;Graylog&lt;/a&gt; to solve the first problem and 
migrated our services to &lt;a href="https://kubernetes.io"&gt;Kubernetes&lt;/a&gt; to solve the second problem. Of course, it took months to do it but it was 
very worth the effort. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be continuously learning&lt;/strong&gt;. Well, this is a must in our industry and very obvious. Be a go-to guy for some specific subjects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Market yourself&lt;/strong&gt;. This is very important as well. If you are doing an awesome job but nobody knows about it, it is not any good for you.
You did something cool, just let your colleagues know by sending a small message in a slack channel or an email. Better yet, let the whole 
world know about your experience by writing about it in a blog or giving a talk in a tech meetup or conference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be likable&lt;/strong&gt;. Be a guy who others want to get a beer with after work. You are not truly a senior if others don't like you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be a mentor&lt;/strong&gt;. You do everything I mentioned above. Great! But this one will make your "seniority" official. Get a junior 
developer under your wings. Teach him everything you know and this will pay off big way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This has worked pretty well for me. I hope it does for you too. Now go ahead and start thinking about how you can implement these 
things in your own workplace. &lt;/p&gt;
&lt;p&gt;P.S. I believe these things can be applied to any job, not only a software developer.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</summary><category term="career"></category></entry><entry><title>Zero Downtime Deployment with Kubernetes</title><link href="http://rahmonov.me/posts/zero-downtime-deployment-with-kubernetes/" rel="alternate"></link><published>2018-02-10T20:10:00+05:00</published><updated>2018-02-10T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2018-02-10:posts/zero-downtime-deployment-with-kubernetes/</id><summary type="html">&lt;p&gt;It is 2018 and your users will not, I repeat, WILL NOT tolerate any downtime or outage with your application. Especially if 
your app is in the B2B sector and other people's money depends on your app. That's why, as a responsible developer you come 
to the office on Sundays and deploy the new version of your application hoping that people are not using your application on 
weekends and that everything will go smoothly and there will be only 10 minutes of downtime as usual. You go to Intercom (
or whatever you use for customer support) and see that there are already a few people complaining about the outage. You tell them
everything is fine now and go home with a bad mood. You don't want to do anything now but drink/smoke/(insert your bad habit here).&lt;/p&gt;
&lt;p&gt;Instead of all that BS, you could have used your Sunday for something more useful. Only if there was no downtime while deploying a new version. 
But that's just an unachievable dream. Even Kelsey Hightower himself admitted that it is a tough thing to do in his &lt;a href="https://youtu.be/u_iAXzy3xBA?t=1915"&gt;PyCon Keynote in 2017&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well, I am happy to tell you that with Kubernetes it is extremely easy, I repeat, EXTREMELY EASY to do a zero-downtime deployment &lt;i class="em em-sunglasses"&gt;&lt;/i&gt;.
Are you feeling excited? Let's see a practical example then, shall we?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this post assumes that you know the basics of Kubernetes. If not, see &lt;a href="/posts/introduction-to-kubernetes/"&gt;this post&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Deploy your app&lt;/h2&gt;
&lt;p&gt;I have prepared Docker images for an app that simply states this in the first version:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Version 1 of my awesome app! Money is pouring in!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the second version of this app says this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Version 2 of my awesome app! More Money is pouring in!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But before it starts running it will wait for 20 seconds. This is needed in order to illustrate downtime between deployments.&lt;/p&gt;
&lt;p&gt;Now let's write a deployment for the app (&lt;code&gt;deployment.yaml&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: myapp-deployment
spec:
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp-container
        image: jahongirr/myapp:1
        imagePullPolicy: Always
        ports:
          - containerPort: 80
            protocol: TCP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything is simple here. We are running our app on the port 80. Time to create the deployment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f deployment.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verify that the app is running by doing &lt;code&gt;kubectl get pods&lt;/code&gt;. If you see something like the following, you should be good:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;myapp-deployment-5c66bd8856-t6rrt                                 1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          6m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let's expose our deployment so that it has an external IP through which it can receive traffic to the app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl expose deployment/myapp-deployment --type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;LoadBalancer&amp;quot;&lt;/span&gt; --port 80
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that exposing a deployment like this is not good. For how this should be done in a real project, see &lt;a href="/posts/introduction-to-kubernetes/"&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After some time, do &lt;code&gt;kubectl get services&lt;/code&gt; in order to find out the external IP of our app. You should see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NAME                        TYPE           CLUSTER-IP     EXTERNAL-IP      PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;             AGE
myapp-deployment            LoadBalancer   10.3.248.68    100.193.114.176   80:31483/TCP        10m
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Type that EXTERNAL-IP in your browser and you should see this:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/zero-downtime-with-k8s/v1.png" rel="lightbox" title="First version"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/zero-downtime-with-k8s/v1.png" alt="First version"&gt;
        &lt;span&gt;First version&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Now, let's deploy the second version of our app. To do that, change the version of the container in your &lt;code&gt;deployment.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: myapp-deployment
spec:
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp-container
        image: jahongirr/myapp:2
        imagePullPolicy: Always
        ports:
          - containerPort: 80
            protocol: TCP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before we apply the change, open your terminal and do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; True
    &lt;span class="k"&gt;do&lt;/span&gt;
        curl 100.193.114.176
        sleep 1s
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you use your own external IP here. This will send a request to our app every second. Run it and you will see this every second:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;title&amp;gt;My Awesome App&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  Version &lt;span class="m"&gt;1&lt;/span&gt; of my awesome app! Money is pouring in!

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool. We know that our app is working. Now, in another terminal, let's apply our change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl apply -f deployment.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go back to the previous terminal window and watch. You will see that some of the requests did not go through and said this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl: &lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt; Failed to connect to 100.193.114.176 port 80: Connection refused
curl: &lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt; Failed to connect to 100.193.114.176 port 80: Connection refused
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Only after some time we see that our app started working again with the version 2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl: &lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt; Failed to connect to 35.193.114.176 port 80: Connection refused
curl: &lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt; Failed to connect to 35.193.114.176 port 80: Connection refused
curl: &lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt; Failed to connect to 35.193.114.176 port 80: Connection refused
curl: &lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt; Failed to connect to 35.193.114.176 port 80: Connection refused
curl: &lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt; Failed to connect to 35.193.114.176 port 80: Connection refused
&amp;lt;!doctype html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;title&amp;gt;My Awesome App&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  Version &lt;span class="m"&gt;2&lt;/span&gt; of my awesome app! More Money is pouring in!

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;title&amp;gt;My Awesome App&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  Version &lt;span class="m"&gt;2&lt;/span&gt; of my awesome app! More Money is pouring in!

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the downtime we have been afraid of. Now, the time has come to awaken our inner ninja and remove this downtime so that 
users don't feel let down by us.&lt;/p&gt;
&lt;p&gt;To do that, we use something called &lt;code&gt;readiness probe&lt;/code&gt;. Basically, this is a check that Kubernetes does in order to make sure that
your pod is ready to send traffic to it. Until it is not ready, Kubernetes will not use your pod. Easy! In our case, it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;readinessProbe:
  httpGet:
    path: /
    port: 80
  initialDelaySeconds: 5
  periodSeconds: 5
  successThreshold: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are basically telling Kubernetes to send an http get request to the path &lt;code&gt;/&lt;/code&gt; every five seconds and if it is successful, mark the 
pod ready and start sending traffic to it.&lt;/p&gt;
&lt;p&gt;Another thing that we should know is something called &lt;code&gt;RollingUpdate strategy&lt;/code&gt;. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It basically tells Kubernetes that there should be zero unavailable pods while deploying (&lt;code&gt;maxUnavailable: 0&lt;/code&gt;) and there should be 
one new pod at a time (&lt;code&gt;maxSurge: 1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Combine these two things and our &lt;code&gt;deployment.yaml&lt;/code&gt; will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: myapp-deployment
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp-container
        image: jahongirr/myapp:1
        imagePullPolicy: Always
        ports:
          - containerPort: 80
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure that our &lt;code&gt;while loop&lt;/code&gt; check is running and saying that the v2 of our app is working. Let's apply our changes now and watch the while loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl apply -f deployment.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After some time you will see that &lt;code&gt;v1&lt;/code&gt; start to run right after &lt;code&gt;v2&lt;/code&gt; without any delay:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;title&amp;gt;My Awesome App&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  Version &lt;span class="m"&gt;2&lt;/span&gt; of my awesome app! More Money is pouring in!

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&amp;lt;!doctype html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;title&amp;gt;My Awesome App&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  Version &lt;span class="m"&gt;1&lt;/span&gt; of my awesome app! Money is pouring in!

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;God, this feels great, doesn't it. No more &lt;code&gt;Connection refused&lt;/code&gt; errors between deployments.&lt;/p&gt;
&lt;p&gt;Congratulations!!! We have done it. Pat yourself in the back. You know what the implications of this are? You don't have 
to deploy on Sundays now and use it for something better. You can deploy any day you want. No more customer complaints about downtime/outage. 
You are free!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see with 10 more lines of code we have achieved that mythical zero-downtime deployment. With Kubernetes it is not 
mythical and dark anymore. &lt;/p&gt;
&lt;p&gt;Let me know in the comments if you have any questions regarding this. Thanks for reading.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;You may also find these &lt;strong&gt;related&lt;/strong&gt; posts interesting: &lt;a href="/posts/introduction-to-kubernetes/"&gt;Introduction to Kubernetes&lt;/a&gt;, &lt;a href="/posts/nginx-ingress-controller/"&gt;Nginx Ingress Controller&lt;/a&gt;  &lt;/p&gt;</summary><category term="kubernetes"></category></entry><entry><title>Introduction to Kubernetes</title><link href="http://rahmonov.me/posts/introduction-to-kubernetes/" rel="alternate"></link><published>2018-02-03T20:10:00+05:00</published><updated>2018-02-03T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2018-02-03:posts/introduction-to-kubernetes/</id><summary type="html">&lt;p&gt;Looking back, 2017 was the year Kubernetes conquered the container orchestration space. For years, Kubernetes' rivals 
such as Docker Swarm and Mesos have been offering their own container orchestration tools and now they both added 
support for Kubernetes within their ecosystems. The largest cloud providers such as AWS, Microsoft Azure and Oracle 
Cloud announced Kubernetes integrations into their respective cloud platforms, not mentioning Google where Kubernetes 
came from originally. So, every developer would benefit from at least learning the basics of Kubernetes. That's exactly 
what we are going to do in this post.&lt;/p&gt;
&lt;p&gt;Before we get started I want you to watch this awesome animated guide first. Then come back and we will discuss the 
details:&lt;/p&gt;
&lt;iframe width="760" height="415" src="https://www.youtube.com/embed/4ht22ReBjno" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Did you watch it? NO? GO BACK TO THE VIDEO YOU STUBBORN LITTLE DEVELOPER! Good. Now let's get the formal definition of 
Kubernetes out of the way:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes is a system for managing containerized applications across a cluster of nodes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In simple terms, you have a group of machines (e.g. VMs) and containerized applications (e.g. Dockerized applications), 
and Kubernetes will help you to easily manage those apps across those machines. We will see a practical example later.&lt;/p&gt;
&lt;h2&gt;Kubernetes components&lt;/h2&gt;
&lt;p&gt;Kubernetes cluster consists of Master and Nodes:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/cluster.svg" rel="lightbox" title="Kubernetes Cluster"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/cluster.svg" alt="Kubernetes Cluster"&gt;
        &lt;span&gt;Kubernetes Cluster (https://kubernetes.io)&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Master is the controlling machine and has components which operate as the main management contact point for users. 
Nodes are where your containerized apps run. Simply put, you run your containerized apps in nodes and you control them 
through the master.&lt;/p&gt;
&lt;p&gt;Both master and nodes have very important components which we discuss below.&lt;/p&gt;
&lt;h3&gt;Master Components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Etcd&lt;/strong&gt; is a consistent and highly-available key-value store used as Kubernetes’ backing store for all cluster data. 
Basically, it is a database for Kubernetes data and represents the state of the cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API Server&lt;/strong&gt; is what exposes Kubernetes API, as its name suggests. It is the main management point of the entire 
cluster. It acts as the bridge between various components disseminating information and commands. In simple terms, it is
the frontend of the Kubernetes control pane.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Controller Manager&lt;/strong&gt; is responsible for regulating the state of the cluster and performing routine tasks. For example, 
the replication controller ensures that the number of replicas defined for a service matches the number currently deployed
on the cluster. Another example is the endpoints controller adjusting, well, endpoints by watching for changes in Etcd.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scheduler Service&lt;/strong&gt; is what assigns workloads to nodes. This is how it does it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reads the workload's operating requirements&lt;/li&gt;
&lt;li&gt;Analyze the current infrastructure environment&lt;/li&gt;
&lt;li&gt;Place the workload on an acceptable node(s)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Node Components&lt;/h3&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/node.svg" rel="lightbox" title="Node components"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/node.svg" alt="Node components"&gt;
        &lt;span&gt;Node Components (https://kubernetes.io)&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is used in order to run your containers, duh! &lt;code&gt;rkt&lt;/code&gt; can be used as an alternative to docker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kubelet&lt;/strong&gt; is the main contact point for each node with the cluster group, relaying to and from control pane
services (master).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proxy&lt;/strong&gt; is used for maintaning network rules and performing connection forwarding. This is what enables the 
Kubernetes service abstraction (DNS).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You won't directly interact with these components directly but it is good to know what is happening behind the magic.&lt;/p&gt;
&lt;p&gt;If the above components are something you don't have to know, the following you must know. Pay great attention.&lt;/p&gt;
&lt;h2&gt;Kubernetes Work Units&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pod&lt;/strong&gt; is the most basic unit in Kubernetes. It represents a unit of deployment, i.e. a single instance of an 
application which may consist of either a single container or a small number of containers that are tightly coupled and 
that share resources (for example, a cloud sql proxy container should run in the same pod as the main application). Other
than an application container (or multiple containers), a pod encapsulates storage resources, a unique network IP and options
that govern how the container(s) should run.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/pods.svg" rel="lightbox" title="Pods"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/pods.svg" alt="Pods"&gt;
        &lt;span&gt;Pods (https://kubernetes.io)&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Excuse the image size. You rarely have to directly deploy pods (I never have). You mostly will attach into the process 
for debugging and testing purposes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Service&lt;/strong&gt; groups together logical collections of pods that perform the same function and presents them as a single 
entity. Also, it acts as a basic load balancer between pods and enables consumers not to worry about anything beyond a 
single access location.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/service1.svg" rel="lightbox" title="Service"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/service1.svg" alt="Service"&gt;
        &lt;span&gt;Service (https://kubernetes.io)&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Label&lt;/strong&gt; is an arbitrary tag to mark work units. Basic key-value pairs. They are what enable services to group 
several pods together. Let's say you give your pods this label "microservice: auth" and the service with the same selector
("microservice: auth") will be able to forward traffic to those pods.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/service2.svg" rel="lightbox" title="Lables"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/service2.svg" alt="Labels"&gt;
        &lt;span&gt;Labels (https://kubernetes.io)&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt; provides a declarative syntax to create/update pods. You tell a deployment your desired state (how many, 
how fast, when) and it changes the actual state to the desired state at a specified rate&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/deployment2.svg" rel="lightbox" title="Deployment"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/intro-to-k8s/deployment2.svg" alt="Deployment"&gt;
        &lt;span&gt;Deployment (https://kubernetes.io)&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ingress&lt;/strong&gt; manages external access to the services. Provides load balancing, SSL termination and path/hos based routing, 
which are considered its advantages over services of "Load Balancer" type. See below for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ingress Controller&lt;/strong&gt; is what implements &lt;code&gt;Ingress&lt;/code&gt; definitions. That is, you write what you need in &lt;code&gt;Ingress&lt;/code&gt; objects
and ingress controllers will turn them into reality. It means that &lt;code&gt;Ingress&lt;/code&gt; itself is nothing without &lt;code&gt;Ingress Controllers&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Full example&lt;/h2&gt;
&lt;p&gt;I know that this is all theory and it is boring. You need to set these things up yourself in order to fully understand.
That's why, carefully go trough this post and get your hands dirty:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="/posts/nginx-ingress-controller/"&gt;Full Kubernetes Example&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Did you go through the example? Pretty cool huh? Kubernetes makes everything very easy. Now that you have seen a practical
example, read these common pitfalls that I have been a victim of while learning Kubernetes. They will save you weeks of 
your time.&lt;/p&gt;
&lt;h2&gt;Common pitfalls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using services of type "LoadBalancer" to expose externally&lt;/strong&gt;: In most tutorials, even in the official documentation,
they use &lt;code&gt;LoadBalancer&lt;/code&gt; services to expose the application. The reason is that it is really easy to do and great of testing.
However, when you want to do SSL termination or route/host based routing, services are not your friends. Use &lt;code&gt;Ingress&lt;/code&gt; for 
real applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GKE Ingress Controller&lt;/strong&gt;: In GKE, you don't have to manage your own ingress controller 
because GKE has its own managed for you. It is great and it works great. However, it cannot force &lt;code&gt;https&lt;/code&gt; at the time of 
this writing. Maybe it will change in the future. But for now, you will have to manage your own Ingress Controller if &lt;code&gt;https&lt;/code&gt;
is a must for your app, which it should be in 2018. See the full example about on how to do that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSL certificates&lt;/strong&gt;: Don't manage them yourself. Use &lt;a href="https://github.com/jetstack/kube-lego"&gt;&lt;code&gt;kube-lego&lt;/code&gt;&lt;/a&gt; which 
automatically updates your certificates when they are about to expire.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zero Downtime&lt;/strong&gt;: By using something called &lt;code&gt;readiness-probe&lt;/code&gt; and a rolling update strategy it is very easy to achieve
zero-downtime deployment. Let me know in the comments if you want a post showing how to do this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don't be afraid to switch to Kubernetes&lt;/strong&gt;: Kubernetes is a new technology and is full of &lt;strike&gt;dark&lt;/strike&gt; magic.
That's why, it is very natural to be afraid to switch from old tools to Kubernetes, especially in production. I know I was
terrified. So, what I did was to switch gradually. First step was to forward 10% of the production traffic to our 
Kubernetes cluster and the rest 90% to our old setup. Next step was to monitor how it was doing. If it was doing OK we changed 
those numbers to 30% and 70%. And on it goes until it reaches 100% to Kubernetes cluster and 0% to our old setup. This way,
you can make sure that your new Kuberbetes cluster will do just fine even in production. We were using &lt;code&gt;NGINX&lt;/code&gt; in our 
old setup and this is how we split traffic between upstreams:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;upstream dashboard_app_server &lt;span class="o"&gt;{&lt;/span&gt;
    server old-setup.com &lt;span class="nv"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;9&lt;span class="p"&gt;;&lt;/span&gt;
    server new-kubernetes-cluster.com &lt;span class="nv"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It means that 90% of the traffic goes to old old-setup.com and 10% goes to new-kubernetes-cluster.com. Pretty easy.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I wish I had this material when I was learning Kubernetes. It would save me weeks of my time. I hope it saves for somebody
else. Make sure to check out the &lt;a href="/posts/nginx-ingress-controller/"&gt;full example&lt;/a&gt;. And always remember this quote
from &lt;a href="https://twitter.com/kelseyhightower"&gt;Kelsey Hightower&lt;/a&gt; himself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes is going to set you free. But it is going to piss you off first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
&lt;p&gt;Fight on!  &lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;You may also find this &lt;strong&gt;related&lt;/strong&gt; post interesting: &lt;a href="/posts/nginx-ingress-controller/"&gt;Nginx Ingress Controller&lt;/a&gt;&lt;/p&gt;</summary><category term="kubernetes"></category></entry><entry><title>Nginx Ingress Controller</title><link href="http://rahmonov.me/posts/nginx-ingress-controller/" rel="alternate"></link><published>2017-11-11T20:10:00+05:00</published><updated>2017-11-11T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2017-11-11:posts/nginx-ingress-controller/</id><summary type="html">&lt;p&gt;This tutorial assumes that you know the basics of &lt;a href="/posts/introduction-to-kubernetes/"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We all know that the easiest way to forward the external traffic to your app is to create a service of type &lt;code&gt;LoadBalancer&lt;/code&gt;. 
If you are running in a cloud environment such as AWS or GCP, of course. That might be OK for some simple apps. However,
if you want to do SSL termination, path based routing or host based routing, you get stuck. This is where &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress&lt;/a&gt; 
comes in. It will allow you to do everything mentioned above and much more, and looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ingress&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;annotations&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress.kubernetes.io/rewrite-target&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rules&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;host&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;foo.bar.com&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;paths&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/foo&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;backend&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;serviceName&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;s1&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;servicePort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bar&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;backend&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;serviceName&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;s2&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;servicePort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you try to create an ingress resource from this file, however, you will witness that nothing will happen(except for GKE, which we will get to later). 
In order for such ingress resources to take effect, there has to be something called Ingress Controller running. Basically, Ingress Controllers 
will be constantly watching for changes in Ingress resources and &lt;strong&gt;&lt;em&gt;apply&lt;/em&gt;&lt;/strong&gt; the rules outlined in those ingress resources. GKE is an exception to this rule.
When you create a cluster in GKE, it will automatically start its built in ingress controller and you don't have to worry about starting it by yourself.
However, at the time of this writing, it has some limits such as a lack of support for web sockets and it can't force SSL. If these things are 
critical to your app, you might want to consider some other ingress controllers. The most popular ones are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/ingress-nginx"&gt;NGINX ingress controller by Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nginxinc/kubernetes-ingress"&gt;NGINX ingress controller by Nginx Inc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://traefik.io/"&gt;Traefik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't have much insight into the difference between two nginx controllers but I think that both of them are good enough. In this tutorial, 
we will be using the one by the Kubernetes team just because it has more stars in GitHub at the time of writing.  &lt;/p&gt;
&lt;p&gt;Here is the plan:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We will create a cluster on GKE&lt;/li&gt;
&lt;li&gt;We will set up an Nginx Ingress Controller&lt;/li&gt;
&lt;li&gt;Once it is running, we will deploy a simple app with the help of an Ingress Resource&lt;/li&gt;
&lt;li&gt;Be happy&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Creating a cluster&lt;/h2&gt;
&lt;p&gt;On GKE, it is as easy as this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcloud container clusters create nginx-ingress-controller
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your mileage will vary if you are using another cloud provider.&lt;/p&gt;
&lt;p&gt;It will take a while to create a cluster. After the command is done, you can check if nodes are ready:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get nodes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gke-nginx-ingress-contro-default-pool-6dbb0978-mkwj   Ready     &amp;lt;none&amp;gt;    1h        v1.7.8-gke.0
gke-nginx-ingress-contro-default-pool-6dbb0978-xvtb   Ready     &amp;lt;none&amp;gt;    1h        v1.7.8-gke.0
gke-nginx-ingress-contro-default-pool-6dbb0978-zp6b   Ready     &amp;lt;none&amp;gt;    1h        v1.7.8-gke.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setting up the Nginx Ingress Controller&lt;/h2&gt;
&lt;p&gt;Our Nginx Ingress Controller will be running in its own namespace. That's why, create &lt;code&gt;namespace.yaml&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Namespace&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, create the resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kubectl create -f namespace.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the requirements is to have a default backend and that default backend should handle all url paths and hosts that Nginx Controller does not 
understand (i.e., all the requests that are not mapped with an Ingress). Basically, it should expose &lt;code&gt;/healtz&lt;/code&gt; url which returns 200 and all the 
other urls should return 404. Such container has already been written for us. That's why, in this step, we create a default backend deployment and service.
Create &lt;code&gt;default-backend.yaml&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-http-backend&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-http-backend&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;namespace&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replicas&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-http-backend&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;terminationGracePeriodSeconds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;60&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-http-backend&lt;/span&gt;
        &lt;span class="c1"&gt;# Any image is permissable as long as:&lt;/span&gt;
        &lt;span class="c1"&gt;# 1. It serves a 404 page at /&lt;/span&gt;
        &lt;span class="c1"&gt;# 2. It serves 200 on a /healthz endpoint&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gcr.io/google_containers/defaultbackend:1.4&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;livenessProbe&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpGet&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/healthz&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scheme&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HTTP&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;limits&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpu&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10m&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;memory&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;20Mi&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;requests&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cpu&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10m&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;memory&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;20Mi&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-http-backend&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;namespace&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-http-backend&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;targetPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8080&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default-http-backend&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create the resources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f default-backend.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that our default backend is running, we can create the Nginx Ingress Controller. Create &lt;code&gt;nginx-ingress-controller.yaml&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx-ingress-controller&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;namespace&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replicas&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;matchLabels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;annotations&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prometheus.io/port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;10254&amp;#39;&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prometheus.io/scrape&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx-ingress-controller&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.9.0-beta.17&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;args&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/nginx-ingress-controller&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--default-backend-service=$(POD_NAMESPACE)/default-http-backend&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;POD_NAME&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;valueFrom&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fieldRef&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fieldPath&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata.name&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;POD_NAMESPACE&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;valueFrom&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fieldRef&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fieldPath&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata.namespace&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;443&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;livenessProbe&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;failureThreshold&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpGet&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/healthz&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10254&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scheme&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HTTP&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;periodSeconds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;successThreshold&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;readinessProbe&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;failureThreshold&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpGet&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/healthz&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10254&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scheme&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;HTTP&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;periodSeconds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;successThreshold&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;timeoutSeconds&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, create the resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f nginx-ingress-controller.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a deployment whose pods will have the ports 80 and 443 open for http and https respectively. Now, we can expose this deployment 
so that it will have External IP through which users will connect to our app. For that we will create a service of type &lt;code&gt;LoadBalancer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;namespace&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;externalTrafficPolicy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Local&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;LoadBalancer&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;targetPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;443&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;targetPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create the resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f nginx-controller-service.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a little while, if you get all the services, you will see that this service will have an External IP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get svc --namespace&lt;span class="o"&gt;=&lt;/span&gt;ingress-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NAME                   TYPE           CLUSTER-IP      EXTERNAL-IP      PORT&lt;span class="o"&gt;(&lt;/span&gt;S&lt;span class="o"&gt;)&lt;/span&gt;                      AGE
ingress-nginx          LoadBalancer   10.59.251.2     104.155.150.97   80:32392/TCP,443:30799/TCP   1h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can try that out by using &lt;code&gt;curl&lt;/code&gt;. Requests to &lt;code&gt;/&lt;/code&gt; should return 404 and to &lt;code&gt;/healthz&lt;/code&gt; should return 200:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -v 104.155.150.97/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
&amp;lt; HTTP/1.1 &lt;span class="m"&gt;404&lt;/span&gt; Not Found
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -v 104.155.150.97/healthz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will give this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
&amp;lt; HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the last step, we will patch our nginx ingress controller deployment a little bit, as intructed &lt;a href="https://github.com/kubernetes/ingress-nginx/blob/master/deploy/README.md#gce---gke"&gt;here&lt;/a&gt;.
Create &lt;code&gt;nginx-contoller-patch.yaml&lt;/code&gt; with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx-ingress-controller&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;namespace&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replicas&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;matchLabels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ingress-nginx&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx-ingress-controller&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.9.0-beta.16&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;args&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/nginx-ingress-controller&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--default-backend-service=$(POD_NAMESPACE)/default-http-backend&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;--publish-service=$(POD_NAMESPACE)/ingress-nginx&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;POD_NAME&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;valueFrom&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fieldRef&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fieldPath&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata.name&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;POD_NAMESPACE&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;valueFrom&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fieldRef&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fieldPath&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata.namespace&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;443&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time, use &lt;code&gt;apply&lt;/code&gt; because we are patching an existing resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl apply -f nginx-contoller-patch.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, our nginx ingress controller should be ready. Verify by typing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get pods --all-namespaces -l &lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ingress-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NAMESPACE       NAME                                        READY     STATUS    RESTARTS   AGE
ingress-nginx   nginx-ingress-controller-1038678203-x2bjb   1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deploy an app&lt;/h2&gt;
&lt;p&gt;Great! Now that our nginx ingress controller is running, we can deploy our application. It is a simple app called cafe. It has two paths: 
&lt;code&gt;/coffee&lt;/code&gt; and &lt;code&gt;/tea&lt;/code&gt; which simple prints info about the server they are running on. Let's get started.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;coffee.yaml&lt;/code&gt; with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;coffee-rc&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replicas&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;coffee&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;coffee&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginxdemos/hello&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;coffee-svc&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;coffee&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;targetPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;protocol&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TCP&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;coffee&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create &lt;code&gt;tea.yaml&lt;/code&gt; with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tea-rc&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replicas&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tea&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tea&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginxdemos/hello&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tea-svc&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tea&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;targetPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;protocol&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TCP&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tea&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create the resources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f coffee.yaml
kubectl create -f tea.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verify that pods are running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get pods
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NAME                         READY     STATUS    RESTARTS   AGE
coffee-rc-3539744749-99qc3   1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
coffee-rc-3539744749-pbwwz   1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
tea-rc-3874333905-g173z      1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
tea-rc-3874333905-n2r25      1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
tea-rc-3874333905-rtsrp      1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool, now we can create our Ingress object which specifies the path rules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cafe-ingress-nginx
  annotations:
    kubernetes.io/ingress.class: &lt;span class="s2"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt;
spec:
  rules:
  - host: cafe.example.com
    http:
      paths:
      - path: /tea
        backend:
          serviceName: tea-svc
          servicePort: 80
      - path: /coffee
        backend:
          serviceName: coffee-svc
          servicePort: 80
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this resource has an annotation &lt;code&gt;kubernetes.io/ingress.class: "nginx"&lt;/code&gt;. This is needed because this ingress is only to be picked up by 
our Nginx Ingress Controller, not the one by GKE.&lt;/p&gt;
&lt;p&gt;Create the resource:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f cafe-ingress.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will take a while to take effect. After some time if you attach to the Nginx Ingress Controller pod, you can verify that Nginx configuration was updated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get pods --namespace&lt;span class="o"&gt;=&lt;/span&gt;ingress-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NAME                                        READY     STATUS    RESTARTS   AGE
nginx-ingress-controller-1038678203-x2bjb   1/1       Running   &lt;span class="m"&gt;0&lt;/span&gt;          2h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Attach to its bash:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; -it nginx-ingress-controller-1038678203-x2bjb bash --namespace&lt;span class="o"&gt;=&lt;/span&gt;ingress-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, open &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; and you will see that the paths &lt;code&gt;/tea&lt;/code&gt; and &lt;code&gt;/coffee&lt;/code&gt; have been configured there:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    server_name cafe.example.com &lt;span class="p"&gt;;&lt;/span&gt;
...    
location /tea
...
location /coffee 
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything is ready now. The only thing left is to configure DNS. If you are on a UNIX like machine, you can go open &lt;code&gt;/etc/hosts&lt;/code&gt; and 
append this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;104.155.150.97 cafe.example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure to replace &lt;code&gt;104.155.150.97&lt;/code&gt; with the IP of your Nginx Ingress Controller's External IP, which you can find by typing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl get svc --namespace&lt;span class="o"&gt;=&lt;/span&gt;ingress-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, make sure that you flush your DNS cache. If you are on a mac, you can do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dscacheutil -flushcache
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, go ahead to &lt;code&gt;cafe.example.com&lt;/code&gt; and see the result. Try going to &lt;code&gt;cafe.example.com/tea&lt;/code&gt; and &lt;code&gt;cafe.example.com/coffee&lt;/code&gt;:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/nginx-ingress-conroller/tea.png" rel="lightbox" title="Cafe"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/nginx-ingress-conroller/tea.png" alt="Cafe"&gt;
        &lt;span&gt;The Cafe App&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is something that I have had tons of problems setting up and getting my heads around. I hope that this will save some time for some of you guys.
Thanks for reading.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;You may also find this &lt;strong&gt;related&lt;/strong&gt; post interesting: &lt;a href="/posts/introduction-to-kubernetes/"&gt;Introduction to Kubernetes&lt;/a&gt;&lt;/p&gt;</summary><category term="kubernetes"></category></entry><entry><title>I gave a talk at Google IO Extended 2017</title><link href="http://rahmonov.me/posts/i-gave-a-talk-at-google-io-extended/" rel="alternate"></link><published>2017-08-11T20:10:00+05:00</published><updated>2017-08-11T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2017-08-11:posts/i-gave-a-talk-at-google-io-extended/</id><summary type="html">&lt;p&gt;At Super Dispatch, we have this event so-called "Friday Talks" where all the people gather up and one person gives a talk on a topic
of his own choice. This is done in order to foster a culture of knowledge sharing and growth. As a software developer at Super Dispatch,
I have regularly been giving talks at this event. The topics I talked about include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/how-to-write-clean-functions/"&gt;How to write clean functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://graphql.org/"&gt;Introduction to GraphQL in Python&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/"&gt;Deploying Django apps using Kubernetes on GCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Practical Guide to Test Driven Development with Django&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and a few more others. This has been an awesome experience for a number of reasons. For one thing, I learned a lot of things in the
process of getting prepared for the talks and filled lots of gaps in my knowledge of things I thought I knew well. For another, 
I overcame my fear of talking to an audience because it is much easier to give a talk to your colleagues than to complete strangers. 
Besides, I learned how to structure my thoughts into an organized talk. &lt;/p&gt;
&lt;p&gt;However, I have never stood up in the stage all alone in front of &lt;strike&gt;all these monsters who are getting ready to eat me up&lt;/strike&gt;
a big number of people whose first thought, I think, would be: "Okay, this guy is giving a talk so he should be an expert". WHAT???
What if I screw up and make fun of myself? What if somebody records how I screw up and puts it on YouTube? &lt;i class="em em-scream"&gt;&lt;/i&gt; 
Okay, I am joking here, that would have been awesome and fun to watch. But the fear was real.&lt;/p&gt;
&lt;p&gt;However, I as read more &lt;a href="https://www.amazon.com/Soft-Skills-software-developers-manual/dp/1617292397"&gt;books&lt;/a&gt; and &lt;a href="https://simpleprogrammer.com/2015/01/05/24-quick-tips-to-boost-your-career-as-a-software-engineer-this-year/"&gt;articles&lt;/a&gt; 
on how to build a good career as a developer, I realized that getting yourself out there by starting a blog or giving a talk is essential to be successful in this industry.
So, when it was announced that &lt;a href="https://www.facebook.com/iutextended/?ref=br_rs"&gt;Google IO Extended&lt;/a&gt; was happening in Tashkent, I knew that it was my chance to get started in this speaking journey. &lt;/p&gt;
&lt;div class="gallery medium"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/i-gave-a-talk/after-talks.jpg" rel="lightbox" title="Google IO People"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/i-gave-a-talk/after-talks.jpg" alt="Google IO People"&gt;
        &lt;span&gt;Event organizers and participants&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;So, I went ahead and submitted a talk. And the rest is history...okay, I am joking again. No history here, just an ordinary tech even, phew &lt;i class="em em-sleepy"&gt;&lt;/i&gt;  &lt;/p&gt;
&lt;p&gt;Thankfully, the organizers accepted my talk and announced it on the event page: &lt;/p&gt;
&lt;div class="gallery medium"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/i-gave-a-talk/announcing-me.png" rel="lightbox" title="My announcement"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/i-gave-a-talk/announcing-me.png" alt="My announcement"&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I was proud and terrified at the same time. Some of the other talks included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/iutextended/photos/a.902471193144035.1073741828.902460013145153/1414752278582588/?type=3&amp;amp;permPage=1"&gt;How to develop a web service in Golang and deploy it using Docker by Diyor Islomov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/iutextended/photos/a.902471193144035.1073741828.902460013145153/1415300861861063/?type=3"&gt;Prototyping apps for non-programmers by Vlad Azimhodjaev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/iutextended/photos/a.902471193144035.1073741828.902460013145153/1416110071780142/?type=3"&gt;Game/CGI characters creation process by Bekzod Fayozov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/iutextended/photos/a.902471193144035.1073741828.902460013145153/1416861721704977/?type=3"&gt;Welcome to journey of JavaScript by Farrux Mamatxalilov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/iutextended/photos/a.902471193144035.1073741828.902460013145153/1420533894671093/?type=3"&gt;Virtual Reality: Status Quo and the potential of the market by Shakhruz Ashirov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the day came and I gave my talk called "How we deploy our Django apps now and where we are going". It was split into three parts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The past: when we deployed everything manually and depended on the ninja develop who was the only one who knew how to do things&lt;/li&gt;
&lt;li&gt;The present: when we are using CI and CD to deploy our apps automatically&lt;/li&gt;
&lt;li&gt;The future: when we plan to use Docker, Kubernetes and CI&amp;amp;CD to deploy our apps&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gallery medium"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/i-gave-a-talk/me-talking.jpg" rel="lightbox" title="The beginning of the talk"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/i-gave-a-talk/me-talking.jpg" alt="The beginning of the talk"&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;It went pretty well. At least, better than I thought it would be. The audience was great. They laughed at approximately half of my jokes.
But hey, 50% is not that bad for the first time &lt;i class="em em-sunglasses"&gt;&lt;/i&gt; &lt;/p&gt;
&lt;div class="gallery medium"&gt;
    &lt;a href="https://s3.amazonaws.com/rahmonov.me/post-images/i-gave-a-talk/audience.jpg" rel="lightbox" title="Audience"&gt;
        &lt;img src="https://s3.amazonaws.com/rahmonov.me/post-images/i-gave-a-talk/audience.jpg" alt="Audience"&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;After my talk ended, several people approached me with questions and some of them got my contacts. Honestly, I felt like a super star.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I know that it is not a huge thing to accomplish but I was and still am excited about what happened. The most important thing is that I
learned a ton.&lt;/p&gt;
&lt;p&gt;I experienced what it is like to be talking to more than 10 people. I improved my presentation skills. I answered the audience's questions.
I got to meet some awesome people. &lt;s&gt;Some people got to meet me, the humblest person on this planet &lt;i class="em em-grin"&gt;&lt;/i&gt;&lt;/s&gt; &lt;/p&gt;
&lt;p&gt;Overall, I think that it was a step forward in my career and I will continue to grab such opportunities to speak in the future as well.
Also, I recommend that you do the same, no matter what you do. Getting oneself out there is what differentiates the successful from the average.&lt;/p&gt;
&lt;p&gt;Thanks for reading &lt;i class="em em-innocent"&gt;&lt;/i&gt; and fight on &lt;i class="em em-muscle"&gt;&lt;/i&gt;&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="speaking"></category><category term="talk"></category><category term="google"></category></entry><entry><title>My first Open Source Project</title><link href="http://rahmonov.me/posts/my-first-open-source-project/" rel="alternate"></link><published>2017-07-23T20:10:00+05:00</published><updated>2017-07-23T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2017-07-23:posts/my-first-open-source-project/</id><summary type="html">&lt;p&gt;Lately, people &lt;a href="https://www.monster.com/career-advice/article/open-source-coding-can-give-your-career-an-edge"&gt;have&lt;/a&gt;
&lt;a href="http://www.yegor256.com/2016/03/08/pimp-up-your-resume.html"&gt;been&lt;/a&gt; saying that contributing to an open source project is very important for a 
programmer's career. I absolutely agree. That's why, I have been trying to contribute as much as I can in my free time by 
fixing a typo here, opening an issue there and solving some small issues. I still remember this feeling of joy when my first pull request
was merged to &lt;a href="https://falconframework.org/"&gt;the Falcon framework&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="first-pr" src="/static/images/post-images/first-osp/pr.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I also wanted to do something of my own. And today, I am excited to say that I published my first open source project in the form of a &lt;a href="https://pypi.python.org/pypi/agile-crm-python"&gt;PyPI package&lt;/a&gt;. YAY!&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="/static/images/post-images/first-osp/pypi.png" rel="lightbox" title="My PyPi package"&gt;
        &lt;img src="/static/images/post-images/first-osp/pypi.png" alt="My PyPi package"&gt;
        &lt;span&gt;My PyPi package&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;It is nothing big. Just a Python wrapper for &lt;a href="https://www.agilecrm.com/"&gt;AgileCRM&lt;/a&gt; &lt;a href="https://github.com/agilecrm/rest-api"&gt;REST API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, there are a number of reasons why I made &lt;a href="https://github.com/rahmonov/agile-crm-python"&gt;this package&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;First of all, &lt;a href="https://github.com/agilecrm/python-api"&gt;their own package&lt;/a&gt; was not comfortable to use. The following is how you update a tag field of a contact:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;update_tag_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5708993221623808&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
       &lt;span class="s2"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="s2"&gt;&amp;quot;test2&amp;quot;&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;agileCRM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;contacts/edit/tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PUT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;update_tag_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have to input all these things manually such as &lt;code&gt;"application/json"&lt;/code&gt; content-type or the method. You also have to know the URL of the endpoint.
Both of them could have easily been managed by the package itself.&lt;/p&gt;
&lt;p&gt;The second reason is that this would decrease the readability of your code because the only method that is available is called &lt;code&gt;agileCRM()&lt;/code&gt;. It 
is not really descriptive, is it? My colleagues would kill me for writing this kind of code. The solution is to wrap this by another method. Again, I think
that it the package should provide this.&lt;/p&gt;
&lt;p&gt;The most important reason, however, is installation! In order to use this package, you have to find it in Github and download the code from there.
Very uncomfortable and raises the question of where you would put this code in your project.&lt;/p&gt;
&lt;p&gt;Now, let's take a look at &lt;a href="https://github.com/rahmonov/agile-crm-python"&gt;my baby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will just give you some examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;agile_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5649050225344512&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;agile_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5649050225344512&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;agile_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;los&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;agile_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_notes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contact_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5689413791121408&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;agile_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;5719238044024832&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_notes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Second Note&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DESCRIPTION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contact_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;contact_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am definitely a little biased here but it is very easy to use because you just have to input your variables and forget about
method type, the endpoint url or the content-type. And look how readable it is. Just by reading, you know that you are fetching or updating a contact or you are
adding a note to a contact.&lt;/p&gt;
&lt;p&gt;As for the installation, simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install agile-crm-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it!&lt;/p&gt;
&lt;p&gt;Again, it is nothing big and probably won't be useful for a lot of people. However, I learned a lot in the process, from writing such a wrapper to making it available as a PyPI package.&lt;/p&gt;
&lt;p&gt;If you also want to start or contribute to an open source project, I think the best advice would be taking a close look at the packages/libraries/frameworks that
you currently use. Maybe there are things that you think need some improvement. Even a small typo in the documentation. Or the name of the function. Anything!
Go ahead and fork the project, make improvements and send a pull request. You will see how exciting it is.&lt;/p&gt;
&lt;p&gt;Okay, that's it from me today. If you liked what I did, please go to &lt;a href="https://github.com/rahmonov/agile-crm-python"&gt;my GitHub repo&lt;/a&gt; and star the project. 
That would be awesome. Leave a comment if you think that something can be improved. That would be more than awesome. Thank you.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</summary><category term="python"></category><category term="open"></category><category term="source"></category></entry><entry><title>Deploy a Django app to Digital Ocean</title><link href="http://rahmonov.me/posts/deploy-a-django-app-to-digitalocean/" rel="alternate"></link><published>2017-03-21T20:10:00+05:00</published><updated>2017-03-21T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2017-03-21:posts/deploy-a-django-app-to-digitalocean/</id><summary type="html">&lt;p&gt;In &lt;a href="http://rahmonov.me/posts/run-a-django-app-with-gunicorn-in-ubuntu-16-04/"&gt;the&lt;/a&gt; &lt;a href="http://rahmonov.me/posts/run-a-django-app-with-nginx-and-gunicorn/"&gt;previous&lt;/a&gt;
&lt;a href="http://rahmonov.me/posts/run-a-django-app-with-nginx-gunicorn-and-supervisor/"&gt;blog posts&lt;/a&gt;, we learned how to run a django app
with Nginx, Gunicorn and Supervisord. Now, let's make a django app available to everybody by deploying it to a &lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt; server.&lt;/p&gt;
&lt;p&gt;You will need a DigitalOcean account to follow along.&lt;/p&gt;
&lt;p&gt;For this tutorial, I have prepared a sample django app in order to simulate a real scenario. It is just a fun app which shows Donald Trump
with his random quotes which can even be personalized. The app makes use of the &lt;a href="https://whatdoestrumpthink.com/"&gt;whatdoestrumpthink&lt;/a&gt; API.
Please note that we are going to do almost the same stuff that we did in the previous tutorials except that we will use a real server.&lt;/p&gt;
&lt;p&gt;Let's get started!&lt;/p&gt;
&lt;h2&gt;Step I (creating a VPS)&lt;/h2&gt;
&lt;p&gt;Go to &lt;code&gt;https://cloud.digitalocean.com/droplets&lt;/code&gt; and click on &lt;code&gt;Create Droplet&lt;/code&gt; button. Then, select Ubuntu 16.04:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="/static/images/post-images/django-digitalocean/ubuntu1604.png" rel="lightbox" title="Choose an image"&gt;
        &lt;img src="/static/images/post-images/django-digitalocean/ubuntu1604.png" alt="Choose an image"&gt;
        &lt;span&gt;Choosing an image&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Select a server:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="/static/images/post-images/django-digitalocean/size.png" rel="lightbox" title="Choose an image size"&gt;
        &lt;img src="/static/images/post-images/django-digitalocean/size.png" alt="Choose an image size"&gt;
        &lt;span&gt;Choosing an image size&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Select a region:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="/static/images/post-images/django-digitalocean/region.png" rel="lightbox" title="Choose a datacenter region"&gt;
        &lt;img src="/static/images/post-images/django-digitalocean/region.png" alt="Choose a datacenter region"&gt;
        &lt;span&gt;Choosing a datacenter region&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Then, preferably add you ssh key and name your server:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="/static/images/post-images/django-digitalocean/server-name.png" rel="lightbox" title="SSH and a host name"&gt;
        &lt;img src="/static/images/post-images/django-digitalocean/server-name.png" alt="SSH and a host name"&gt;
        &lt;span&gt;Entering SSH key and a host name&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;And click on &lt;strong&gt;&lt;em&gt;Create&lt;/em&gt;&lt;/strong&gt;. After a while, you will see that your server has been created:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="/static/images/post-images/django-digitalocean/created-server.png" rel="lightbox" title="Server created"&gt;
        &lt;img src="/static/images/post-images/django-digitalocean/created-server.png" alt="Server created"&gt;
        &lt;span&gt;Server created&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Now, copy the IP address of the newly created server and ssh in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh root@104.236.57.112
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace that IP address with your own. Welcome in! You should see something like this:&lt;/p&gt;
&lt;div class="gallery medium"&gt;
    &lt;a href="/static/images/post-images/django-digitalocean/ssh-in.png" rel="lightbox" title="SSH in"&gt;
        &lt;img src="/static/images/post-images/django-digitalocean/ssh-in.png" alt="SSH in"&gt;
        &lt;span&gt;SSHed in&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;Step II (installing system-wide dependencies)&lt;/h2&gt;
&lt;p&gt;First, let's update and upgrade the packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get update
apt-get -y upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install nginx:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install -y nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install supervisor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install -y supervisor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install python virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install -y python-virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install postgresql:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install -y postgresql postgresql-contrib
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step III (configuring database)&lt;/h2&gt;
&lt;p&gt;Switch to the postgres user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo su - postgres
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Type this to go to the postgres interactive shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# CREATE DATABASE djtrumpprod;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# CREATE USER djtrumpuser WITH password &amp;#39;djtrump&amp;#39;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Give this new user an access to administer the new database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# GRANT ALL PRIVILEGES ON DATABASE djtrumpprod TO djtrumpuser;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quit from the shell and switch back to the root user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# \q&lt;/span&gt;
postgres@djtrump:~$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step IV (setting up our project and its environment)&lt;/h2&gt;
&lt;p&gt;Clone our sample app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/rahmonov/djtrump.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create and activate a virtual environment with python3.5 (not critical to use python3.5 though):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv djtrumpenv --python&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;which python3.5&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; djtrumpenv/bin/active
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, your prompt will show that you are operating under a Python virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;djtrumpenv&lt;span class="o"&gt;)&lt;/span&gt; root@djtrump:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go ahead and install dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; djtrump
pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we should migrate but there is one more thing that we need to do before that. If you go to the settings folder, there are two files:
&lt;code&gt;base.py&lt;/code&gt; and &lt;code&gt;prod.py&lt;/code&gt;. Basically, &lt;code&gt;base.py&lt;/code&gt; contains all the configurations and &lt;code&gt;prod.py&lt;/code&gt; overrides those needed in the production environment.
For example, &lt;code&gt;DATABASES&lt;/code&gt; config is overridden in &lt;code&gt;prod.py&lt;/code&gt;. That's why, we need to tell our environment to use this &lt;code&gt;prod.py&lt;/code&gt; and not the default &lt;code&gt;base.py&lt;/code&gt;.
This is done by setting &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; env variable to &lt;code&gt;prod.py&lt;/code&gt; path. Open &lt;code&gt;~/.bash_profile&lt;/code&gt; and add this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;djtrump.settings.prod
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and quit. Then, &lt;code&gt;source&lt;/code&gt; this file for our changes to take effect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, try to migrate. Most probably, it will fail and say something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FATAL:  Peer authentication failed &lt;span class="k"&gt;for&lt;/span&gt; user &lt;span class="s2"&gt;&amp;quot;djtrumpuser&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's because, postgresl uses peer authentication by default, which is it will succeed if the user with the same name as the postgres user uses it.
In our case, there is no &lt;code&gt;djtrumpuser&lt;/code&gt; user in postgres and thus it fails. To fix it, go to &lt;code&gt;/etc/postgresql/9.5/main/pg_hba.conf&lt;/code&gt; and change the line
that says this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;   all     all      peer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;   all     all      md5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and quit. This way, postgres will try to use password to authenticate the user. Now, restart postgresql for our changes to take effect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service postgresl restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go ahead and migrate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works now. Cool! Try to run the development server and it will work.&lt;/p&gt;
&lt;h2&gt;Step V (configuring nginx)&lt;/h2&gt;
&lt;p&gt;Create a new file: &lt;code&gt;/etc/nginx/sites-available/djtrump&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen 80&lt;span class="p"&gt;;&lt;/span&gt;
    server_name your_ip&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nv"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /favicon.ico &lt;span class="o"&gt;{&lt;/span&gt; access_log off&lt;span class="p"&gt;;&lt;/span&gt; log_not_found off&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

    location /static/ &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;alias&lt;/span&gt; /root/djtrump/static/&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
            include proxy_params&lt;span class="p"&gt;;&lt;/span&gt;
            proxy_pass http://your_ip:8030&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace &lt;code&gt;your_ip&lt;/code&gt; with the IP address of your server. We know what this is doing from the previous tutorials. Basically, it is
serving the static files from &lt;code&gt;/root/djtrump/static/&lt;/code&gt; and redirecting http requests to gunicorn which should be running on port 8030.&lt;/p&gt;
&lt;p&gt;Now, let's enable this file by linking it to the sites-enabled folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -s /etc/nginx/sites-available/djtrump /etc/nginx/sites-enabled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart nginx:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are two more things that we need to do before nginx works. First, we need to put all our static files in the folder &lt;code&gt;/root/djtrump/static/&lt;/code&gt;
and run gunicorn on port 8030 as we promised in nginx config file.&lt;/p&gt;
&lt;p&gt;First, run this to gather all static files in that folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py collectstatic --noinput
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, run gunicorn:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind 0.0.0.0:8030 djtrump.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go ahead and type in the browser the IP of your address. You will see that the app is running. Congratulations!&lt;/p&gt;
&lt;p&gt;Please note that if you cloned the app to the user's home directory, you may face issues with static files (Permission denied error).
One of the ways to solve it to run nginx as root. To do that, open &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; and change the line that says:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user www-data&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user root&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and restart the nginx:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great! You will now see the pleasant face of Donald Trump and a random quote of his:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="/static/images/post-images/django-digitalocean/donald.png" rel="lightbox" title="DJDonald"&gt;
        &lt;img src="/static/images/post-images/django-digitalocean/donald.png" alt="DJDonald"&gt;
        &lt;span&gt;DJDonald&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;Step VI (configuring supervisor)&lt;/h2&gt;
&lt;p&gt;Create &lt;code&gt;/etc/supervisor/conf.d/djtrump.conf&lt;/code&gt; and type in the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;program:djtrump&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/djtrumpenv/bin/gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind 0.0.0.0:8030 djtrump.wsgi
&lt;span class="nv"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/root/djtrump
&lt;span class="nv"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/djtrump.err.log
&lt;span class="nv"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/djtrump.out.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart, reread and update the supervisor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service supervisor restart
sudo supervisorctl reread
sudo supervisorctl update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you can stop, start and restart your app easily! Try this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo supervisorctl stop djtrump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you go to the app in the browser, it will respond  with 502 (Bad Gateway) response. Go ahead and start it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo supervisorctl start djtrump
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to the app and you will see it working!&lt;/p&gt;
&lt;p&gt;Well, this is pretty much it! Congratulations, your django app is now live and available to everybody!&lt;/p&gt;
&lt;p&gt;In the next tutorials, we will introduce ourselves to the world of CI and CD (Continuous Integration and Continuous Delivery). &lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;
&lt;p&gt;P.S. If you want to make the style of this app better, please send a PR. I would love some help on CSS side or any other side for that matter.    &lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="gunicorn"></category><category term="nginx"></category><category term="supervisord"></category><category term="digitalocean"></category><category term="deploy"></category></entry><entry><title>Run a Django app with Nginx, Gunicorn and Supervisor in Ubuntu 16.04 (Part III)</title><link href="http://rahmonov.me/posts/run-a-django-app-with-nginx-gunicorn-and-supervisor/" rel="alternate"></link><published>2017-03-08T20:10:00+05:00</published><updated>2017-03-08T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2017-03-08:posts/run-a-django-app-with-nginx-gunicorn-and-supervisor/</id><summary type="html">&lt;p&gt;This tutorial is the continuation of &lt;a href="http://rahmonov.me/posts/run-a-django-app-with-nginx-and-gunicorn/"&gt;this one&lt;/a&gt; where we learned
how to run a django app with nginx and gunicorn. Now we will add Supervisord into the mix.&lt;/p&gt;
&lt;h2&gt;The reason we need Supervisord&lt;/h2&gt;
&lt;p&gt;Right now, we have our app running with Nginx and Gunicorn. However, every time our machine boots we have to start gunicorn and overall,
controlling (stopping, restarting and etc) gunicorn is very difficult. What we want is an easy way of doing so.&lt;/p&gt;
&lt;p&gt;Welcome &lt;a href="http://supervisord.org/"&gt;Supervisord&lt;/a&gt; which allows us to monitor and control a number of processes on UNIX-like operating
systems.&lt;/p&gt;
&lt;p&gt;Let's remember how we used to start our app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn --daemon --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind unix:/home/ubuntu/myproject/myproject.sock myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I know right?! It is very long to type and those paths are very error prone. Now, try to stop that daemon (see what I mean? :) ).
We will have to find all those gunicorn processes and kill them, which is at least cruel.&lt;/p&gt;
&lt;p&gt;With supervisord at our disposal, it will be very easy and convenient to execute those commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;supervisorctl start myproject
supervisorctl stop myproject
supervisorctl restart myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You see how easy it is now?! Good. Now, let's set up this beast.&lt;/p&gt;
&lt;h2&gt;Installation and Setup&lt;/h2&gt;
&lt;p&gt;To install, type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install supervisor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, restart it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service supervisor restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The main configuration file of supervisord is here &lt;code&gt;/etc/supervisor/supervisord.conf&lt;/code&gt;. If we take a look, we will see that it contains these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;include&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /etc/supervisor/conf.d/*.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It means that config files of specific projects can be stored here &lt;code&gt;/etc/supervisor/conf.d/&lt;/code&gt; and they will be included in that main file.&lt;/p&gt;
&lt;p&gt;So, let's create &lt;code&gt;myproject.conf&lt;/code&gt; in &lt;code&gt;/etc/supervisor/conf.d/&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/supervisor/conf.d/myproject.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and configure our project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;program:myproject&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/myprojenv/bin/gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind unix:/home/ubuntu/myproject/myproject.sock myproject.wsgi
&lt;span class="nv"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/myproject
&lt;span class="nv"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/myproject.err.log
&lt;span class="nv"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/myproject.out.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's look at the significance of each line now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;program:myproject&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we are defining a program with the name &lt;code&gt;myproject&lt;/code&gt;. This name will be used when we do such commands as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo supervisorctl start myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/myprojenv/bin/gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind unix:/home/ubuntu/myproject/myproject.sock myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This line is used to define a command which is used when we start or restart our project. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This line indicates a path from which that command will be run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These lines define certain behavior of the script under different conditions. &lt;code&gt;Autostart&lt;/code&gt; tells the script to start on system boot and 
&lt;code&gt;autorestart&lt;/code&gt; tells it to restart when it exists for some reason.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/myproject.err.log
&lt;span class="nv"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/myproject.out.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And these final lines define two files where different kinds of logs are stored. Obviously, error logs will be stored in &lt;code&gt;myproject.err.log&lt;/code&gt;
and others in &lt;code&gt;myproject.out.log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's save the file and execute the following commands to bring these changes into effect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo supervisorctl reread
sudo supervisorctl update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, that's pretty much it. Simple, right? To verify that everything is working, type this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps ax &lt;span class="p"&gt;|&lt;/span&gt; grep gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see several gunicorn processes running. Or, you can go to &lt;code&gt;localhost:8000&lt;/code&gt; and you will see your django app up and running.&lt;/p&gt;
&lt;p&gt;Or, you can now use &lt;code&gt;supervisor&lt;/code&gt; to check whether your app is running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo supervisorctl status myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, go ahead and play with those &lt;code&gt;supervisorctl&lt;/code&gt; commands to start, stop, restart and check the status of your app.&lt;/p&gt;
&lt;p&gt;Let's do one more thing. Let's see the builtin supervisor web interface in action. Those who don't like command line to control processes
will love this.&lt;/p&gt;
&lt;p&gt;Open up &lt;code&gt;/etc/supervisor/supervisor.conf&lt;/code&gt; and place these lines at the beginning of the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;inet_http_server&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.0.0.0:9001
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will indicate that the supervisor web interface will run on &lt;code&gt;0.0.0.0:9001&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Save the file and reload supervisor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo supervisorctl reload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open up your browser and go to &lt;code&gt;0.0.0.0:9001&lt;/code&gt;. You will see something like this:&lt;/p&gt;
&lt;div class="gallery large"&gt;
    &lt;a href="/static/images/supervisor.jpg" rel="lightbox" title="Supervisor web interface"&gt;
        &lt;img src="/static/images/supervisor.jpg" alt="Supervisor web interface"&gt;
        &lt;span&gt;Web interface of Supervisor&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Cool, right?! Go ahead and play with it to control your project.&lt;/p&gt;
&lt;p&gt;Thanks for reading thus far. Now you have one more tool in your arsenal.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rahmonov.me/posts/run-a-django-app-with-gunicorn-in-ubuntu-16-04/"&gt;Part I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rahmonov.me/posts/run-a-django-app-with-nginx-and-gunicorn/"&gt;Part II&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="gunicorn"></category><category term="nginx"></category><category term="supervisord"></category></entry><entry><title>Run a Django app with Nginx and Gunicorn in Ubuntu 16.04 (Part II)</title><link href="http://rahmonov.me/posts/run-a-django-app-with-nginx-and-gunicorn/" rel="alternate"></link><published>2017-02-26T20:10:00+05:00</published><updated>2017-02-26T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2017-02-26:posts/run-a-django-app-with-nginx-and-gunicorn/</id><summary type="html">&lt;p&gt;This tutorial is the continuation of &lt;a href="http://rahmonov.me/posts/run-a-django-app-with-gunicorn-in-ubuntu-16-04/"&gt;this one&lt;/a&gt; where we learned
how to run a django app with gunicorn. Now we will add Nginx into the mix.&lt;/p&gt;
&lt;h2&gt;The reason we need Nginx&lt;/h2&gt;
&lt;p&gt;If you followed the previous tutorial, we ran our django app with Gunicorn. However, at the end, we saw that the styles of the admin
panel were gone. The reason is that Gunicorn is an application server and just runs the app (django app in our case) and django, as we know,
does not serve static files except in development. Nginx to the rescue! It will be a reverse proxy for Gunicorn. What the hell is a reverse proxy?
Good question! We all know what VPNs are, right? We use them to access some website that is blocked for some reason. In this case, we access
that website through a VPN: We -&amp;gt; VPN -&amp;gt; some website. This kind of proxies are called Forward Proxies. As for reverse proxies, think of
them as forced proxies. For example, a user is trying to access our django app running in gunicorn. He thinks that he is accessing the app directly.
However, what is happening is that he is first accessing the Nginx server which decides what to do next. If the user is accessing a static file,
the Nginx server will serve it itself. Otherwise, it will redirect it to Gunicorn. In plain terms, http requests will be handled by
Gunicorn and static ones by Nginx. That's why we need Nginx.&lt;/p&gt;
&lt;p&gt;Apart from that, Nginx also improves performance, reliability, security and scale.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;By now we already have Django and Gunicorn ready. So, let's install Nginx now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we will configure Nginx to pass traffic to the process.&lt;/p&gt;
&lt;p&gt;Create a file &lt;code&gt;/etc/nginx/sites-available/djtrump&lt;/code&gt; and type in the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen 8000&lt;span class="p"&gt;;&lt;/span&gt;
    server_name 0.0.0.0&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nv"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /favicon.ico &lt;span class="o"&gt;{&lt;/span&gt; access_log off&lt;span class="p"&gt;;&lt;/span&gt; log_not_found off&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

    location /static/ &lt;span class="o"&gt;{&lt;/span&gt;
            root /home/ubuntu/myproject&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
            include proxy_params&lt;span class="p"&gt;;&lt;/span&gt;
            proxy_pass http://unix:/home/ubuntu/myproject/myproject.sock&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adjust the paths such as &lt;code&gt;/home/ubuntu/myproject&lt;/code&gt; to your own environment.&lt;/p&gt;
&lt;p&gt;Let's see what is going on here.&lt;/p&gt;
&lt;p&gt;The first two lines tell that it will listen to the port &lt;code&gt;8000&lt;/code&gt; on &lt;code&gt;0.0.0.0&lt;/code&gt;. The next line about favicon will tell Nginx to ignore
problems with favicon.ico.&lt;/p&gt;
&lt;p&gt;The next block is very important. It says that static files, which all have a standard URI prefix of &lt;code&gt;static/&lt;/code&gt; should be looked for in
&lt;code&gt;~/myproject/static/&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;And the last location block matches all other requests other that static ones (remember reverse proxy). One thing to note here is that Nginx and Gunicorn "talk to" 
each other through a unix socket. That's why we will bind our gunicorn to a socket as we will see soon.&lt;/p&gt;
&lt;p&gt;Now, let's enable this file by linking it to the &lt;code&gt;sites-enabled&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and check if our configuration file was correctly written:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nginx -t
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything is OK, you should see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf &lt;span class="nb"&gt;test&lt;/span&gt; is successful
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may ask what all that linking and &lt;code&gt;sites-enabled&lt;/code&gt; folder were about. We could have included those settings in Nginx's main settings file:
&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;. If we take a look at it, we will see this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include /etc/nginx/sites-enabled/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, we can see that what we did makes it more modular and much easier to maintain when we have several apps being served by Nginx.&lt;/p&gt;
&lt;p&gt;OK, now that we have configured Nginx, let's see some action.&lt;/p&gt;
&lt;p&gt;First, let's move all our static files to &lt;code&gt;~/myproject/static/&lt;/code&gt; because we set up Nginx to look for them there.
Open up &lt;code&gt;myproject/settings.py&lt;/code&gt; and add this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.path.join&lt;span class="o"&gt;(&lt;/span&gt;BASE_DIR, &lt;span class="s1"&gt;&amp;#39;static/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and close. Now, let's collect them to that folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Confirm the operation and our static files should be there for Nginx to find them.&lt;/p&gt;
&lt;p&gt;Now, let's finally run our app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn --daemon --workers &lt;span class="m"&gt;3&lt;/span&gt; --bind unix:/home/ubuntu/myproject/myproject.sock myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As I told earlier, we are starting gunicorn a little differently now. We are binding it to a unix socket file which is needed to talk
to Nginx. This file will be created and enable Nginx and Gunicorn to talk to each other. You may ask what about ports and ip?.
Nginx will take care of that. Remember we configured it to listen to &lt;code&gt;0.0.0.0:8000&lt;/code&gt;? Cool! Now, let's restart Nginx to make these changes
take effect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, go ahead and access &lt;code&gt;0.0.0.0:8000&lt;/code&gt;. Great, our app is running. Let's check our admin panel now at &lt;code&gt;0.0.0.0:8000/admin&lt;/code&gt;. Awesome,
styles are there! We have achieved what we wanted. Congratulations!&lt;/p&gt;
&lt;p&gt;This is just the tip of the iceberg. You will need more stuff as your app grows. Go to &lt;a href="https://nginx.org/en/docs/"&gt;nginx docs&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;p&gt;In the next tutorial, we will take a look at &lt;code&gt;supervisord&lt;/code&gt; to make process management very easy.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rahmonov.me/posts/run-a-django-app-with-gunicorn-in-ubuntu-16-04/"&gt;Part I&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://rahmonov.me/posts/run-a-django-app-with-nginx-gunicorn-and-supervisor/"&gt;Part III&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="gunicorn"></category><category term="nginx"></category></entry><entry><title>Run a Django app with Gunicorn in Ubuntu 16.04 (Part I)</title><link href="http://rahmonov.me/posts/run-a-django-app-with-gunicorn-in-ubuntu-16-04/" rel="alternate"></link><published>2017-02-21T20:10:00+05:00</published><updated>2017-02-21T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2017-02-21:posts/run-a-django-app-with-gunicorn-in-ubuntu-16-04/</id><summary type="html">&lt;p&gt;This tutorial is aimed at beginners and is a part of a series where we learn to run a django app with Gunicorn and Nginx, and manage
it with the help of the Supervisord. Basically, we are trying to emulate a production environment.&lt;/p&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;We are all very well aware that we can run our django app simply by executing a &lt;code&gt;./manage.py runserver&lt;/code&gt; command. We also know that it is
called a &lt;em&gt;development&lt;/em&gt; server for a reason. You know it is not robust, security issues, thread issues and etc. So, how do we &lt;em&gt;really&lt;/em&gt; run
our app then?&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Enter &lt;a href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt;, a simple, light and speedy Python WSGI HTTP Server for UNIX. We will see how to use gunicorn now 
but it is not the main reason I wrote this tutorial. The main reason is this: back in the day I was terrified at the thought of anything
related to &lt;em&gt;production vs development&lt;/em&gt; stuff because I thought, you know, &lt;strong&gt;THESE ARE NGINX and GUNICORN&lt;/strong&gt; which can support millions of
requests per second and are very secure/robust/reliable and thus should be very difficult to learn and configure. I want to prevent others
from experiencing the same and demonstrate that it is really &lt;strong&gt;simple&lt;/strong&gt; and &lt;strong&gt;simple&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Enough talk, let's fight! (YAY, always wanted to quote Kung Fu Panda)&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First, let's go ahead and update/upgrade our packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, install &lt;code&gt;pip&lt;/code&gt;.
If you are using python2, type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are instead using python3, type the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now install &lt;code&gt;virtualenv&lt;/code&gt;:
For python2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For python3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip3 install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's go ahead now and install a virtual environment at &lt;code&gt;/opt/envs/myprojenv&lt;/code&gt;. You can install it anywhere you like and in real life use 
a more descriptive name for the virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv /opt/envs/myprojenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; /opt/envs/myprojenv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now see &lt;code&gt;(myprojenv)&lt;/code&gt; at the beginning of your command line.&lt;/p&gt;
&lt;p&gt;Now, install Django. By the way, we will only use &lt;code&gt;pip&lt;/code&gt; from now on, not &lt;code&gt;pip3&lt;/code&gt;, as we are inside a virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin startproject myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apply migrations and run the development server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; myproject
./manage.py migrate
./manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to &lt;code&gt;localhost:8000/admin&lt;/code&gt; and make sure that it is running. Is it running? Cool! Easy right?!
Now we will replace this development server with gunicorn and you will see that it is &lt;strong&gt;as easy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Install gunicorn:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run this, go to &lt;code&gt;localhost:8000&lt;/code&gt;and behold the magic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DO YOU SEE IT? It is this easy.&lt;/p&gt;
&lt;p&gt;Now you might be wondering what is that &lt;code&gt;wsgi&lt;/code&gt; thing is. Well, it stands for Web Server Gateway Interface and basically is a way how
apps/frameworks and servers talk to each other. If the server(like Gunicorn) has &lt;code&gt;wsgi&lt;/code&gt; implemented and so has your framework(Django),
it means that you can run your app with that server. And the entry point of communication for these two is the variable &lt;code&gt;application&lt;/code&gt;,
which is located in &lt;code&gt;myproject/wsgi.py&lt;/code&gt; in our case. You can read more about this in &lt;a href="https://www.python.org/dev/peps/pep-0333/"&gt;PEP 333&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Let's play with it a little bit to see what it got.&lt;/p&gt;
&lt;p&gt;We can bind it to a specific port:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn --bind 0.0.0.0:8030 myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can increase the number of workers to serve requests, which you probable will in real life as your users increase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn --workers &lt;span class="m"&gt;3&lt;/span&gt; myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run it in a daemon mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn --daemon myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or all of them altogether(a shorter version):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn -d -b 0.0.0.0:8030 -w &lt;span class="m"&gt;3&lt;/span&gt; myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read more about these options &lt;a href="http://docs.gunicorn.org/en/stable/run.html#commonly-used-arguments"&gt;in the docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If these options get too long, you can create an &lt;code&gt;ini&lt;/code&gt; file and run it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn -c /path/to/config/file myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running your app with gunicorn, go to the django admin panel at &lt;code&gt;localhost:8000/admin&lt;/code&gt;. You will see that all styles are gone.
The reason is that gunicorn is an application server and it does not serve static files. In order to solve this problem, we will take a look
at &lt;code&gt;Nginx&lt;/code&gt; next and use it as a reverse proxy for gunicorn. We will talk about what &lt;code&gt;reverse proxy&lt;/code&gt; is as well so don't think about it for now.&lt;/p&gt;
&lt;p&gt;Well, that's it for now. This is a brief overview of django with gunicorn. Go to &lt;a href="http://docs.gunicorn.org/en/stable/"&gt;docs&lt;/a&gt; and read more.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/run-a-django-app-with-nginx-and-gunicorn/"&gt;Part II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/run-a-django-app-with-nginx-gunicorn-and-supervisor/"&gt;Part III&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="gunicorn"></category></entry><entry><title>How to write clean functions</title><link href="http://rahmonov.me/posts/how-to-write-clean-functions/" rel="alternate"></link><published>2016-06-15T20:10:00+05:00</published><updated>2016-06-15T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2016-06-15:posts/how-to-write-clean-functions/</id><summary type="html">&lt;p&gt;The following is heavily influenced (99%) by one of the must-read books for any developer: &lt;a href="https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0132350882&amp;amp;linkCode=as2&amp;amp;tag=rahmonov-20&amp;amp;linkId=8f50e156683243a557687dbe7c8fda9e"&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" href="https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=rahmonov-20&amp;linkId=8f50e156683243a557687dbe7c8fda9e"&gt;&lt;img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0132350882&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=rahmonov-20" &gt;&lt;/a&gt;&lt;img src="//ir-na.amazon-adsystem.com/e/ir?t=rahmonov-20&amp;l=am2&amp;o=1&amp;a=0132350882" width="1" height="1" border="0" alt="Clean Code" style="border:none !important; margin:0px !important;" /&gt;&lt;/p&gt;
&lt;h2&gt;Clean Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.
Code for readability.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Damn right!!! Uncle Bob Martin even mentions of a once-successful company that went bankrupt 
because of unmaintainable codebase. Clean code is that serious.&lt;/p&gt;
&lt;p&gt;Now that we know the importance of clean code, let's take a look at how to write clean functions first.&lt;/p&gt;
&lt;h2&gt;Clean Functions&lt;/h2&gt;
&lt;p&gt;Functions are key players in any program and it is very important to write them well.&lt;/p&gt;
&lt;p&gt;Let's take a look at the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;testableHtml&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PageData&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;includeSuiteSetup&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;WikiPage&lt;/span&gt; &lt;span class="n"&gt;wikiPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWikiPage&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;StringBuffer&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuffer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;includeSuiteSetup&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;WikiPage&lt;/span&gt; &lt;span class="n"&gt;suiteSetup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="n"&gt;PageCrawlerImpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInheritedPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;SuiteResponder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SUITE_SETUP_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wikiPage&lt;/span&gt;
                    &lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suiteSetup&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;WikiPagePath&lt;/span&gt; &lt;span class="n"&gt;pagePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                        &lt;span class="n"&gt;suiteSetup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPageCrawler&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getFullPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suiteSetup&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;pagePathName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PathParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagePath&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!include -setup .&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagePathName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;WikiPage&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                &lt;span class="n"&gt;PageCrawlerImpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInheritedPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SetUp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wikiPage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;WikiPagePath&lt;/span&gt; &lt;span class="n"&gt;setupPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="n"&gt;wikiPage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPageCrawler&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getFullPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;setupPathName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PathParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setupPath&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!include -setup .&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setupPathName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getContent&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;WikiPage&lt;/span&gt; &lt;span class="n"&gt;teardown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                &lt;span class="n"&gt;PageCrawlerImpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInheritedPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TearDown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wikiPage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;teardown&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;WikiPagePath&lt;/span&gt; &lt;span class="n"&gt;tearDownPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="n"&gt;wikiPage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPageCrawler&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getFullPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;teardown&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;tearDownPathName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PathParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tearDownPath&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!include -teardown .&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tearDownPathName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;includeSuiteSetup&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;WikiPage&lt;/span&gt; &lt;span class="n"&gt;suiteTeardown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="n"&gt;PageCrawlerImpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInheritedPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;SuiteResponder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SUITE_TEARDOWN_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;wikiPage&lt;/span&gt;
                    &lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suiteTeardown&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;WikiPagePath&lt;/span&gt; &lt;span class="n"&gt;pagePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                        &lt;span class="n"&gt;suiteTeardown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPageCrawler&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getFullPath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suiteTeardown&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;pagePathName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PathParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagePath&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!include -teardown .&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagePathName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setContent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHtml&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously, this is not a well-written function. But what problems does it have?!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- Too much going on, i.e. too big
- Many different levels of abstraction
- Nested if statements controlled by flags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With little method extraction, renaming and restructuring, we can come to the better version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;renderPageWithSetupsAndTeardowns&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PageData&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isSuite&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isTestPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isTestPage&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;WikiPage&lt;/span&gt; &lt;span class="n"&gt;testPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWikiPage&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;StringBuffer&lt;/span&gt; &lt;span class="n"&gt;newPageContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuffer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;includeSetupPages&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testPage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newPageContent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isSuite&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;newPageContent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getContent&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;includeTeardownPages&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testPage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newPageContent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isSuite&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setContent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newPageContent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHtml&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, it is much better! But the main question remains: What attributes should we give our functions that 
will a casual reader to intuit what it does easily?&lt;/p&gt;
&lt;h2&gt;Small&lt;/h2&gt;
&lt;p&gt;Functions should be small! They should even be smaller than that! Actually, the code above is too large and
it should be shortened to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;renderPageWithSetupsAndTeardowns&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PageData&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isSuite&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isTestPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;includeSetupAndTeardownPages&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isSuite&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pageData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHtml&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How long? Uncle Bob says that they should hardly be 20 lines long.&lt;/p&gt;
&lt;h2&gt;Do One Thing&lt;/h2&gt;
&lt;p&gt;Functions should do one thing. They should do it well. They should do it only.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;testableHtml()&lt;/code&gt; is doing too many things:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- Creating buffers
- Fetching pages
- Searching for inherited pages
- Rendering paths
- Generating HTML
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the other hand, the function &lt;code&gt;renderPageWithSetupsAndTeardowns()&lt;/code&gt; is doing only one thing: Including setups and teardowns into test pages!&lt;/p&gt;
&lt;p&gt;However, it can be hard to know what that one thing is. Hence, the next rule.&lt;/p&gt;
&lt;h2&gt;One level of abstraction per function&lt;/h2&gt;
&lt;p&gt;Let's see the following example to understand what one level of abstraction means.
Imagine we need to write a function that builds a house. That is, our function should answer the question of
"What needs to be done to build a house?". The answer would roughly be: find location, design, get permits, break ground and etc...
In code, it would look something like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;buildHouse&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;find_location&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;design&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fix_documents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;break_ground&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;build_walls_and_roof&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function does have only one level of abstraction. Everything inside the function is a part of the answer to the question of "how to build a house?".
To compare, take a look at the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;buildHouse&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;select_desirable_place&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;select_property&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;survey_property&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;consider_access_issues&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;consult_architect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;design_utilities&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;design_efficiently&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do you see it? The first 4 functions is not a part of the answer to the question: "What to do to build a house?", but rather "What to do to find a location to build a house?".
Do you see it now? They are 2 levels deep, not one! In real code, it would look much worse.&lt;/p&gt;
&lt;h2&gt;Use descriptive names&lt;/h2&gt;
&lt;p&gt;The title says it all. Examples: is_testable(), includePages().
You know you are working on clean code when each function turns out to be pretty much what you expected.&lt;/p&gt;
&lt;p&gt;In choosing a name, we should:
    - not be afraid to make a long name
    - not be afraid to spend time choosing a name
    - even try several different names and read the code with each in place
    - be consistent in our names&lt;/p&gt;
&lt;p&gt;Follow these pieces of advice and your functions become much cleaner and more maintainable.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</summary><category term="clean"></category><category term="code"></category><category term="functions"></category><category term="robert"></category><category term="martin"></category></entry><entry><title>Periodic Tasks with Celery</title><link href="http://rahmonov.me/posts/periodic-tasks-with-celery/" rel="alternate"></link><published>2016-05-20T20:10:00+05:00</published><updated>2016-05-20T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2016-05-20:posts/periodic-tasks-with-celery/</id><summary type="html">&lt;p&gt;Celery is a task queue with focus on real-time processing, while also supporting task scheduling.
In the &lt;a href="http://rahmonov.me/posts/indroduction-to-celery/"&gt;previous post&lt;/a&gt;, we saw how celery can be 
used to take tasks out of main thread and process them in background. Now, we will take a look at its
task scheduling feature.&lt;/p&gt;
&lt;h2&gt;Use case example&lt;/h2&gt;
&lt;p&gt;As part of your company's marketing campaign, you want to periodically send emails to your customers 
informing them about new products and features. Besides, you want to send those emails at 9:30 a.m. every day
to make sure people see them when they just arrived in their office. You don't want to be doing it manually.
Celery to the rescue!&lt;/p&gt;
&lt;h2&gt;Get started&lt;/h2&gt;
&lt;p&gt;Now that we know we want to accomplish, we will see a simple example. Good news is that it is extremely easy to 
set up a periodic task.&lt;/p&gt;
&lt;p&gt;First, let's write a function that simply says &lt;code&gt;Hello, name&lt;/code&gt; in proj/tasks.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, in your settings file, write the following down:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CELERYBEAT_SCHEDULE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;say-hello-every-30-seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;task&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tasks.say_hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;schedule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Blog reader&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;CELERY_TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I guess it is pretty clear what these settings mean. They simply say that &lt;code&gt;tasks.say_hello&lt;/code&gt; should be 
executed every 30 seconds and given an argument &lt;code&gt;Blog reader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By the way, this feature of celery is called &lt;code&gt;celery-beat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, in command line, do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;celery_demo&lt;/span&gt; &lt;span class="n"&gt;beat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and behold! Every 30 seconds you will see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[2016-08-14 13:06:44,087: INFO/MainProcess] Scheduler: Sending due task say-hello-every-30-seconds (tasks.say_hello)
[2016-08-14 13:07:14,114: INFO/MainProcess] Scheduler: Sending due task say-hello-every-30-seconds (tasks.say_hello)  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty awesome, huh?&lt;/p&gt;
&lt;p&gt;If you want more flexibility of when the task is executed, take a look at &lt;a href="http://docs.celeryproject.org/en/latest/reference/celery.schedules.html#celery.schedules.crontab"&gt;crontab&lt;/a&gt;
With that, you can execute your tasks at any time you want. For example: Execute every ten minutes, but only between 3-4 am, 5-6 pm and 10-11 pm on Thursdays or Fridays.&lt;/p&gt;
&lt;p&gt;Told you it is very easy :)&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</summary><category term="celery"></category><category term="python"></category><category term="asynch"></category><category term="threads"></category><category term="periodic"></category></entry><entry><title>Introduction to Celery</title><link href="http://rahmonov.me/posts/indroduction-to-celery/" rel="alternate"></link><published>2016-04-28T20:10:00+05:00</published><updated>2016-04-28T20:10:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2016-04-28:posts/indroduction-to-celery/</id><summary type="html">&lt;p&gt;According to the &lt;a href="http://docs.celeryproject.org/en/latest/index.html"&gt;docs&lt;/a&gt;, Celery is a simple, 
flexible and reliable distributed system to process vast amounts of messages, while providing 
operations with the tools required to maintain such a system.&lt;/p&gt;
&lt;p&gt;It’s a task queue with focus on real-time processing, while also supporting task scheduling.&lt;/p&gt;
&lt;h2&gt;What is it used for?&lt;/h2&gt;
&lt;p&gt;It is mainly used for the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running something in the background&lt;/li&gt;
&lt;li&gt;Asynchronous execution of code&lt;/li&gt;
&lt;li&gt;Scheduling periodic work&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Use case example&lt;/h2&gt;
&lt;p&gt;Your web app needs to send an email. That is a very slow operation. While users can put up with 4 or 5
seconds until an email is sent, it might leave a bad impression on them. Solution? Celery (singing...
"I came in like a wrecking ball...(by Miley Cyrus)")! It will take this operation out of the main thread and executes it
in the background. This gives the user the impression of good performance and “snappiness”, even 
though the real work might actually take some time.&lt;/p&gt;
&lt;p&gt;Read &lt;a href="http://decafbad.com/blog/2008/07/04/queue-everything-and-delight-everyone/"&gt;Queue everything and delight everyone&lt;/a&gt;
for additional info on why task queues can be useful.&lt;/p&gt;
&lt;h2&gt;Get started&lt;/h2&gt;
&lt;p&gt;Now that we know what Celery is and what it is used for, let's jump in and see how to use it with Django
(other cases should be similar). We will see how to send an email with Celery.&lt;/p&gt;
&lt;p&gt;First, create a new &lt;code&gt;proj/proj/celery.py&lt;/code&gt; module that defines a Celery instance&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;absolute_import&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

&lt;span class="c1"&gt;# set the default Django settings module for the &amp;#39;celery&amp;#39; program.&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;proj.settings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;  &lt;span class="c1"&gt;# noqa&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;proj&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Using a string here means the worker will not have to&lt;/span&gt;
&lt;span class="c1"&gt;# pickle the object when using Windows.&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.conf:settings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autodiscover_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, import this app in &lt;code&gt;proj/proj/__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;absolute_import&lt;/span&gt;

&lt;span class="c1"&gt;# This will make sure the app is always imported when&lt;/span&gt;
&lt;span class="c1"&gt;# Django starts so that shared_task will use this app.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;celery_app&lt;/span&gt;  &lt;span class="c1"&gt;# noqa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, create an ordinary function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jrahmonov2@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Email is sent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that tasks are normally placed in &lt;code&gt;tasks.py&lt;/code&gt; file inside django apps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- app1/
    - app1/tasks.py
    - app1/models.py
- app2/
    - app2/tasks.py
    - app2/models.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, for this simple example, I put the &lt;code&gt;send_email()&lt;/code&gt; function inside &lt;code&gt;proj/proj/celery.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, let's check our function by executing it in the shell&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;proj.celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_email&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a couple of seconds, you will see &lt;code&gt;Email is sent&lt;/code&gt; message as long as you properly configured email settings.
But these seconds are too long when you can easily get rid of them. To do that, we now need to transform
this function into a celery task by simply using &lt;code&gt;@shared_task&lt;/code&gt; decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@shared_task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jrahmonov2@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Email is sent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we start celery in the command line by executing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;celery -A proj worker -l info
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we call our task from the shell with &lt;code&gt;delay()&lt;/code&gt; method of celery:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;proj.celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_email&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will immediately see that the method returned! That means that users will see the results right away!
If you check you Celery logs, you will see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;920&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MainProcess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Received&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;proj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;d2b9446&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4791&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;da4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8136&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ee74d78cf394&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;470&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;sent&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;471&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MainProcess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;proj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;d2b9446&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4791&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;da4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8136&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ee74d78cf394&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;succeeded&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;2.550240921&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Awesome! Pretty fast!&lt;/p&gt;
&lt;p&gt;This was a simple example of how to use Celery. Please note that this post does not discuss the installation process of Celery (or RabbitMQ) and is only
intended to serve as a fast introduction to the tool. &lt;/p&gt;
&lt;p&gt;In the next post, I will discuss how Celery can be used for periodic tasks (think cron jobs)&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</summary><category term="celery"></category><category term="pyton"></category><category term="asynch"></category><category term="threads"></category></entry><entry><title>Close modal on back button in AngularJS</title><link href="http://rahmonov.me/posts/close-modal-on-back-button/" rel="alternate"></link><published>2015-10-03T21:14:00+05:00</published><updated>2015-10-03T21:14:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2015-10-03:posts/close-modal-on-back-button/</id><summary type="html">&lt;p&gt;We, developers, use modals all the time. I personally like to use &lt;a href="https://github.com/likeastore/ngDialog"&gt;ngDialog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is light, easy to use and highly customizable. &lt;a href="https://angular-ui.github.io/bootstrap/#/modal"&gt;Bootstrap&lt;/a&gt; is also good but 
it is somewhat heavy.&lt;/p&gt;
&lt;p&gt;Here is how modal is opened in ngDialog:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;externalTemplate.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SomeController&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will open up a modal as expected but when you press the back button of the browser, what happens?&lt;/p&gt;
&lt;p&gt;I would expect the modal to close and stay where I was before the modal. But what happens is that you go
back in browser history. Ouch! Especially on mobile, it is really not convenient to press the small 'x' button
of the modal. That's why, I would guess, user would press the back button to close the modal.&lt;/p&gt;
&lt;p&gt;Here is how I solved the problem:&lt;/p&gt;
&lt;p&gt;First, I created a service that deals with modals and it has a flag &lt;code&gt;modalIsShown&lt;/code&gt; which will be used later:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;myApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ModalService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ngDialog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;modalIsShown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;openModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;closeByDocument&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;closeByEscape&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;showClose&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;closeModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ngDialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;openModal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;openModal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;closeModal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;closeModal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;modalIsShown&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;modalIsShown&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, Here is how I open up a modal from my controller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contactModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ModalService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modalIsShown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ModalService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;contactModal.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FooterController&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically, the function sets the flag to true and opens the modal.&lt;/p&gt;
&lt;p&gt;The most interestion part happens here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;myApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$rootScope&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$route&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$routeParams&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ModalService&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$rootScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$routeParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ModalService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;$rootScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$routeChangeStart&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ModalService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modalIsShown&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;ModalService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeModal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;ModalService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modalIsShown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When a user presses a back button, when the url is about to change, angular calls this &lt;code&gt;$routeChangeStart&lt;/code&gt;
observing function. And this function checks whether the flag &lt;code&gt;modalIsShown&lt;/code&gt; is set to true. If so, it means
that a user is trying to close a modal by pressing the back button, thus it closes the modal, sets the flag
back to false and prevents the url change.&lt;/p&gt;
&lt;p&gt;If anyone could suggest a better or cleaner way in comments, that would be awesome.&lt;/p&gt;
&lt;p&gt;Hope it helps.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</summary><category term="javascript"></category><category term="angularjs"></category><category term="modal"></category></entry><entry><title>"Relation 'auth_user' does not exist" bug in Django 1.8</title><link href="http://rahmonov.me/posts/django-1.8-bug/" rel="alternate"></link><published>2015-10-01T21:14:00+05:00</published><updated>2015-10-01T21:14:00+05:00</updated><author><name>Jahongir Rahmonov</name></author><id>tag:rahmonov.me,2015-10-01:posts/django-1.8-bug/</id><summary type="html">&lt;p&gt;I recently started a fresh project in Django 1.8 with PostgreSQL. I set everything up and was ready to do
my migrations. To my surprise, I got this error: &lt;code&gt;ProgrammingError: relation "auth_user" does not exist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I had absolutely no fancy stuff that could cause some problem.&lt;/p&gt;
&lt;p&gt;I looked around and found out that I was not the only one. Even some &lt;a href="https://github.com/evonove/django-oauth-toolkit/issues/204"&gt;issues&lt;/a&gt;
were opened on this question.&lt;/p&gt;
&lt;p&gt;In short, here is how I solved it:&lt;/p&gt;
&lt;p&gt;First option is to migrate the model which others depend on, i.e. &lt;code&gt;auth_user&lt;/code&gt; and then the rest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second option is downgrade the Django to 1.7 version and everything should work fine.&lt;/p&gt;
&lt;p&gt;I hope this tip will prevent at least somebody from wasting a lot of time like I did.&lt;/p&gt;
&lt;p&gt;Fight on!&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="bug"></category></entry></feed>